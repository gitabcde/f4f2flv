bootstrap信息结构
struct abst
{
 uint32_t total_length;
 uint8_t name[4];
#if (total_length==1)
 uint64_t real_total_length;
#endif
 uint8_t version;
 uint24_t flags;
 uint32_t bootstrapversion;
 uint8_t byte;//if(byte & 0x20) live=true;metadata=false; update=(byte & 0x10)>>4
 uint32_t timescale;
 uint64_t currentmediatime;
 uint64_t smpteTimeCodeOffset;
 uint8_t moviIdentifier[];字符串，以\0结尾
 uint8_t serverEntryCount;
 uint8_t serverEntryTable[];字符串，以\0结尾,如果serverEntryCount为0，那么这个变量不占用空间
 uint8_t qualityEntryCount;
 uint8_t qualityEntryTable[];字符串，以\0结尾,如果qualityEntryCount为0，这个变量不占用空间
 uint8_t drmdata;字符串，以\0结尾
 uint8_t metadata;字符串，以\0结尾
 uint8_t segRunTableCount; 
 struct asrt[segRunTableCount];
 uint8_t fragRunTableCount;
 struct afrt[fragRunTableCount];
};

struct asrt
{
 uint32_t length;
 uint8_t name[4];//"asrt"
#if (length==1)
 uint64_t real_length;
#endif
 uint8_t version;
 uint24_t flags;
 uint8_t qulityEntryCount;
 uint8_t qulitySegmentUrlModifiers[];字符串,以\0结尾，根据qulityEntryCount的值决定，如果是qulityEntryCount是0的话就没有这个变量
 uint32_t segcount;
 struct tag_asrt_fraginfo
 {
  uint32_t firstSegment;
  uint32_t fragmentsPerSegment;
 }asrt_fraginfo[segcount];
};

struct afrt
{
 uint32_t length;
 uint8_t name[4];//"afrt"
#if (length==1)
 uint64_t real_length;
#endif
 uint8_t version;
 uint24_t flags;
 uint32_t timescale;
 uint8_t qualityEntryCount;
 uint8_t qualitySegmentUrlModifiers[];同afrt结构
 uint32_t fragEntries;
 struct tag_afrt_fraginfo
 {
  uint32_t firstfragment;
  uint64_t firstfragmentTimesStamp;
  uint32_t fragmentDuration;
#if fragmentDuration==0
  uint8_t discontinusIndicater;
#endif
 }afrt_fraginfo[fragEntries];	  
};

f4f文件结构
struct f4f
{
 struct tag_fra;
 struct abst;
 struct asrt;
 struct afrt;
 struct moof;
 struct mdat;

}

struct mdat
{
 uint32_t length;
 uint8_t name[4];//“mdat”
#if (length==1)
 uint64_t real_length;
#endif
 struct tag_header;
#if（packet_type==0x08)
 struct AudioData;
#elif (packet_type==0x09)
 struct VideoData;
#elif (packet_type==0x12)
 struct ScriptData;
#endif

 
};

struct flv
{
 struct tag_flv_header
  {
   uint8_t flv_signature[3];//固定为“FLV”
   uint8_t flv_version;//目前为0x01
   uint8_t flag;//从高位到低位，前5为为0，第六位表示是否存在音频tag，第七位为0，第8为表示是否存在视频tag
   uint32_t length_flvheader;
  }flv_header; 
  struct tag_tag
  {
   uint32_t length_prev_tag;
   struct tag_tagheader
    {
     uint8_t tag_type;
     uint24_t length_tag_data;
     uint24_t timestamp;//单位是毫秒
     uint8_t timestamp_ext;
     uint24_t stream_id;//总是0
    }tagheader;
    //根据tag_type的不同接下来的数据也不同
    if（tag_type==0x08)
    struct AudioData;
    if(tag_type==0x09)
    struct VideoData;
    if(tag_type==0x12)
    struct ScriptData;
    }tags[];
};

struct AudioData
{
 uint8_t flag;//从高到低，前4位代表了音频数据格式，1表示ADPCM,2表示mp3,4表示Nellymoser 160khz mono,5表示Nellymoser 8-khz mono,10表示AAC,5-6位表示采样率,0=5.5khz,1=11khz,2=22khz,3=44khz,第7位表示采样精度,0=8bits,1=16bits,第8为表示音频类型，0=mono,1=stereo
 uint8_t data;

};

struct VideoData
{
 uint8_t flag;//从高到低，前四位表示帧类型，1表示keyframe，2表示innerframe，3表示disposable inner frame（h.263 only)，4表示generated keyframe.后四位表示视频编码ID，1=JPEG,2=Sorenson H.263,3=Screen Video,4=On2 VP6,5=On2 VP6 with alpha channel,6=Screen video version2,7表示AVC(H.264)
 uint8_t data;
};

struct ScriptData
{
 uint8_t first_package_type;//一般为0x02
 uint16_t length_package_name;//一般为0x000A
 uint8_t package_name[];//一般为"onMetaData"
 uint8_t second_package_type;//一般为0x08,表示数组
 uint32_t element_count;//表示数组元素的个数
 struct tag_amf_element
  {
   uint16_t length_element_name;
   uint8_t element_name[];
   uint8_t element_type;//
   uint8_t element_value[];//根据element_type的不同长度不同
  }amf_element[]；
};
AMF数据类型定义
enum AMF_TYPE
{
 Number=0x00,//double类型
 Boolean=0x01,//占用一个字节
 String=0x02,//开头是一个uint16_t类型的整数用来表示字符串的长度
 Object=0x03,//hashtable,以utf8字符创作为key，其他amf类型作为value，对象以0x00,0x00,0x09表示结束
 MovieClip=0x04,//not avaliable in remoting
 Null=0x05,//占用一个字节
 Undefined=0x06,//占用一个字节
 Reference=0x07,
 MixedArray=0x08,//跟hashtable类似，但是定义了hashtable的大小,对象开头是一个uint32_t类型的变量，用来指示hashtable中元素数目
 EndOfObject=0x09,
 Array=0x0a,//arraylist对象，对象开头是一个uint32_t类型的变量，定义了arraylist的长度
 Data=0x0b,//用一个double类型表示从1970/1/1经过的时间，然后接着一个uint16_t类型表示时区
 LongString=0x0c,//开头是一个uint32_t类型的整数用来表示字符串的长度
 Unsupported=0x0d,
 Recordset=0x0e,//Remoting,server-to-client only
 XML=0x0f,//用LongString类型的字符串表示
 TypedObjec(Class instance)=0x10,
 AMF3data=0x11;//sent by flash player 9 +
};